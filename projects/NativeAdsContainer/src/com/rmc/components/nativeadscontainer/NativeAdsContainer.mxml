<?xml version="1.0" encoding="utf-8"?>
<s:BorderContainer
	xmlns:views="com.rmc.projects.happybirthday.view.components.views.*" 
	xmlns:fx="http://ns.adobe.com/mxml/2009" 
	xmlns:s="library://ns.adobe.com/flex/spark" 
	
	borderVisible="true"
	borderColor="0x000000"
	borderWeight="1"
	
	backgroundColor="0xcccccc"
	
	width="100%"
	height="100%"
	
	activate="_onAppActivated(event)"
	deactivate="_onAppDeactivate(event)"
	addedToStage="_onAddedToStage(event)"
	show="_onShow(event)"
	resize="_onResize(event)"
	hide="_onHide(event)"
	
	>
	
	<fx:Script>
		<![CDATA[
			import com.hdi.nativeExtensions.NativeAds;
			import com.hdi.nativeExtensions.NativeAdsEvent;
			
			import mx.events.FlexEvent;
			
			
			//--------------------------------------
			//  Properties
			//--------------------------------------
			//PUBLIC GETTER/SETTERS
			/**
			 *  IF THE COMPONENT IS ON THE STAGE - USEFULL FOR SIZING INFORMATION
			 */		
			private function _getIsOnStage () 					: Boolean 	{ return stage != null; }

			/**
			 *  REQUIRED: The admob.com 'Publisher ID' property.
			 */		
			private var _unitID : String;
			[Bindable]
			public function get unitID () 					: String 	{ return _unitID; }
			public function set unitID (aValue : String) 	: void 		{ 
				
				if (_unitID != aValue) {
					
					_unitID = aValue; 
					
					NativeAds.setUnitId(_unitID);
					NativeAds.initAd(0,0, 320, 50);
					
					if (!NativeAds.dispatcher.hasEventListener(NativeAdsEvent.AD_RECEIVED)  ) {
						NativeAds.dispatcher.addEventListener(NativeAdsEvent.AD_RECEIVED, _onAdReceived);
						NativeAds.setAdMode(true); 
					}
					
				}
				
			}
			
			//PUBLIC
			
			//PUBLIC CONST
			
			
			//PRIVATE
			/**
			 * RECTANGLE: Save position and scale
			 * 
			 * THIS Way we know when we have a 'new' Rect and can re-issue the ad positioning
			 * 
			 */
			private var _currentBounds_rectangle:Rectangle;
			
			// --------------------------------------
			// Methods
			// --------------------------------------
			// PUBLIC
			/**
			 * Show The Ad - Be Carefull here not to re-call something without need
			 * 
			 * @return void
			 * 
			 */
			protected function _doShowAd():void
			{
				//
				var newBounds_rectangle: Rectangle = getBounds(this.parentApplication as DisplayObject);
				
				//	WHEN WE ARE ON THE STAGE, AND THE POSITION OR SIZE HAS CHANGED, WE UPDATE THE AD. COOL!
				if ( (_currentBounds_rectangle == null || !_currentBounds_rectangle.equals(newBounds_rectangle) ) &&
					_getIsOnStage()	) {
					_currentBounds_rectangle = newBounds_rectangle;
					trace ("	CHANGED _currentBounds_rectangle = " + _currentBounds_rectangle);
					NativeAds.showAd(_currentBounds_rectangle.x, _currentBounds_rectangle.y, _currentBounds_rectangle.width, _currentBounds_rectangle.height );
				}
			}
			
			// PRIVATE
			
			// --------------------------------------
			// Event Handlers
			// --------------------------------------
			/**
			 * Handles the aEvent: <code>Event.ACTIVATE</code>.
			 * 
			 * @param aEvent <code>Event</code> The incoming aEvent payload.
			 *  
			 * @return void
			 * 
			 */
			protected function _onAppActivated(aEvent:Event):void
			{
				NativeAds.restoreAd();
			}
			
			/**
			 * Handles the aEvent: <code>Event.DEACTIVATE</code>.
			 * 
			 * @param aEvent <code>Event</code> The incoming aEvent payload.
			 *  
			 * @return void
			 * 
			 */
			protected function _onAppDeactivate(aEvent:Event):void
			{
				NativeAds.deactivateAd();
			}
			
			/**
			 * Handles the aEvent: <code>Event.ADDED_TO_STAGE</code>.
			 * 
			 * @param aEvent <code>Event</code> The incoming aEvent payload.
			 *  
			 * @return void
			 * 
			 */
			protected function _onAddedToStage(aEvent:Event):void
			{
				// unitID setter does the 'work'. We do nothing here.
				_doShowAd();
			}
			
			/**
			 * Handles the aEvent: <code>Event.RESIZE</code>.
			 * 
			 * @param aEvent <code>Event</code> The incoming aEvent payload.
			 *  
			 * @return void
			 * 
			 */
			protected function _onResize(aEvent:Event):void
			{
				//	SHOW THE AD
				_doShowAd ();
				
			}
			
			/**
			 * Handles the aEvent: <code>FlexEvent.SHOW</code>.
			 * 
			 * @param aEvent <code>FlexEvent</code> The incoming aEvent payload.
			 *  
			 * @return void
			 * 
			 */
			protected function _onShow(aEvent:FlexEvent):void
			{
				//	SHOW THE AD
				_doShowAd ();
				
			}
			/**
			 * Handles the aEvent: <code>FlexEvent.HIDE</code>.
			 * 
			 * @param aEvent <code>FlexEvent</code> The incoming aEvent payload.
			 *  
			 * @return void
			 * 
			 */
			protected function _onHide(aEvent:FlexEvent):void
			{
				//	HIDE THE AD
				NativeAds.hideAd();
			}
			
			/**
			 * Handles the aEvent: <code>NativeAdsEvent.AD_RECEIVED</code>.
			 * 
			 * @param aEvent <code>NativeAdsEvent</code> The incoming aEvent payload.
			 *  
			 * @return void
			 * 
			 */
			protected function _onAdReceived(aEvent:NativeAdsEvent):void
			{
				//Anything behind the ad will be hidden, update your layout to handle this edge case.
				trace("onAdReceived aEvent = " + aEvent);
			}
			
			
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<!-- Place any UI components here. -->	
</s:BorderContainer>