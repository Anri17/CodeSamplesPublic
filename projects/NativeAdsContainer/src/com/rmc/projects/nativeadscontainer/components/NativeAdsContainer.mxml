<?xml version="1.0" encoding="utf-8"?>
<s:BorderContainer
	xmlns:views="com.rmc.projects.happybirthday.view.components.views.*" 
	xmlns:fx="http://ns.adobe.com/mxml/2009" 
	xmlns:s="library://ns.adobe.com/flex/spark" 
	
	borderVisible="true"
	borderColor="0x000000"
	borderWeight="1"
	
	backgroundColor="0xcccccc"
	
	width="100%"
	height="100%"
	
	
	activate="_onAppActivated(event)"
	deactivate="_onAppDeactivate(event)"
	addedToStage="_onAddedToStage(event)"
	removedFromStage="_onRemovedFromStage(event)"
	resize="_onResize(event)"
	
	>
	
	<fx:Script>
		<![CDATA[
			import com.hdi.nativeExtensions.NativeAds;
			import com.hdi.nativeExtensions.NativeAdsEvent;
			import com.rmc.projects.nativeadscontainer.managers.NativeAdsManager;
			
			import mx.core.FlexGlobals;
			import mx.events.FlexEvent;
			
			
			//--------------------------------------
			//  Properties
			//--------------------------------------
			//PUBLIC GETTER/SETTERS
			/**
			 *  IF THE COMPONENT IS ON THE STAGE - USEFULL FOR SIZING INFORMATION
			 */		
			private function _getIsOnStage () 					: Boolean 	{ return stage != null; }
			
			/**
			 *  REQUIRED: The admob.com 'Publisher ID' property.
			 */		
			private var _unitID : String;
			[Bindable]
			public function get unitID () 					: String 	{ return _unitID; }
			public function set unitID (aValue : String) 	: void 		{ 
				
				if (_unitID != aValue) {
					
					_unitID = aValue; 
					
					//INITIALIZE THE MANAGER ONLY ONE TIME
					if (!NativeAdsManager.unitID) {
						NativeAdsManager.initialize(_unitID);
					}
					
					//SETUP LISTENERS AND DO 'ONE-TIME' CODE
					if (!NativeAds.dispatcher.hasEventListener(NativeAdsEvent.AD_RECEIVED)  ) {
						//SETUP
						NativeAds.dispatcher.addEventListener(NativeAdsEvent.AD_RECEIVED, _onAdReceived);
					}
					
				}
				
				
			}
			
			//PUBLIC
			
			//PUBLIC CONST
			
			
			//PRIVATE
			/**
			 * RECTANGLE: Save position and scale
			 * 
			 * THIS Way we know when we have a 'new' Rect and can re-issue the ad positioning
			 * 
			 */
			private var _currentBounds_rectangle:Rectangle;
			
			// --------------------------------------
			// Methods
			// --------------------------------------
			// PUBLIC
			
			/**
			 * Show The Ad - Be Carefull here not to re-call something without need
			 * 
			 * @return void
			 * 
			 */
			protected function _doShowAd():void
			{
				//SHOW AGAIN AT CURRENT SIZE/POSITION
				if (_currentBounds_rectangle) {
					_doRebuildSizeAndPositionForAd();
				}
				
			}
			
			/**
			 * Show The Ad - Be Carefull here not to re-call something without need
			 * 
			 * @return void
			 * 
			 */
			protected function _doRebuildSizeAndPositionForAd():void
			{
				// TODO Auto-generated method stub
				var position_point : Point = localToGlobal(new Point (0,0));
				trace ("Position: " + position_point);
				
				//
				var newBounds_rectangle: Rectangle = new Rectangle (
					position_point.x,
					position_point.y,
					width,
					height
				);
				
				trace ("_currentBounds_rectangle = " + _currentBounds_rectangle);
				
				//	WHEN WE ARE ON THE STAGE, AND THE POSITION OR SIZE HAS CHANGED, WE UPDATE THE AD. COOL!
				if ( (_currentBounds_rectangle == null || !_currentBounds_rectangle.equals(newBounds_rectangle) ) &&
					_getIsOnStage()	) {
					_currentBounds_rectangle = newBounds_rectangle;
					trace ("	CHANGED _currentBounds_rectangle = " + _currentBounds_rectangle);
					
					//REMEMBER THIS IS THE X,Y OF THE *CENTER POINT*
					NativeAdsManager.moveCurrentAdTo(
						newBounds_rectangle.x,
						newBounds_rectangle.y + newBounds_rectangle.width/2,
						newBounds_rectangle.width,
						newBounds_rectangle.height);
					
				}
				
				//
			}
			
			
			// PRIVATE
			
			// --------------------------------------
			// Event Handlers
			// --------------------------------------
			/**
			 * Handles the aEvent: <code>Event.ACTIVATE</code>.
			 * 
			 * @param aEvent <code>Event</code> The incoming aEvent payload.
			 *  
			 * @return void
			 * 
			 */
			protected function _onAppActivated(aEvent:Event):void
			{
				NativeAds.restoreAd();
			}
			
			/**
			 * Handles the aEvent: <code>Event.DEACTIVATE</code>.
			 * 
			 * @param aEvent <code>Event</code> The incoming aEvent payload.
			 *  
			 * @return void
			 * 
			 */
			protected function _onAppDeactivate(aEvent:Event):void
			{
				NativeAds.deactivateAd();
			}
			
			/**
			 * Handles the aEvent: <code>Event.ADDED_TO_STAGE</code>.
			 * 
			 * @param aEvent <code>Event</code> The incoming aEvent payload.
			 *  
			 * @return void
			 * 
			 */
			protected function _onAddedToStage(aEvent:Event):void
			{
				
				// unitID setter does the 'work'. We do nothing here.
				_doRebuildSizeAndPositionForAd();
				_onMove1()
				_onMove1()
			}
			
			/**
			 * Handles the aEvent: <code>Event.REMOVED_FROM_STAGE</code>.
			 * 
			 * @param aEvent <code>Event</code> The incoming aEvent payload.
			 *  
			 * @return void
			 * 
			 */
			protected function _onRemovedFromStage(aEvent:Event):void
			{
				//	HIDE THE AD
				NativeAds.hideAd();
			}
			
			/**
			 * Handles the aEvent: <code>Event.RESIZE</code>.
			 * 
			 * @param aEvent <code>Event</code> The incoming aEvent payload.
			 *  
			 * @return void
			 * 
			 */
			protected function _onResize(aEvent:Event):void
			{
				//	SHOW THE AD
				_doRebuildSizeAndPositionForAd();
				
			}
			
			/**
			 * Handles the aEvent: <code>NativeAdsEvent.AD_RECEIVED</code>.
			 * 
			 * @param aEvent <code>NativeAdsEvent</code> The incoming aEvent payload.
			 *  
			 * @return void
			 * 
			 */
			protected function _onAdReceived(aEvent:NativeAdsEvent):void
			{
				//Anything behind the ad will be hidden, update your layout to handle this edge case.
				trace("onAdReceived aEvent = " + aEvent);
			}
			
			
			protected function _onShowBoundsClick(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				var position_point : Point = localToGlobal(new Point (0,0));
				trace ("Position: " + position_point);
			}
			
			protected function _onMove():void
			{
				var aX_num : Number = Number(x_textinput.text);
				var aY_num : Number = Number(y_textinput.text);
				var aWidth_num : Number = Number(width_textinput.text);
				var aHeight_num : Number = Number(height_textinput.text);
				trace ("\n----");
				trace (aX_num);
				trace (aY_num);
				trace (aX_num);
				trace (aWidth_num);
				trace (aHeight_num);
				NativeAdsManager.moveCurrentAdTo(aX_num, aY_num, aWidth_num, aHeight_num);
				
				//WIDE BOX CENTERED BOTTOM - 20, 910, 800, 800
				//BIG BOX IN LOWER RIGHT - 20, 750, 320, 800
				//SMALL BOX LOWER RIGHT  - 20, 750, 320, 50
			}
			protected function _onMove1():void
			{
				NativeAdsManager.moveCurrentAdTo(20, 910, 800, 800);
			}
			
		]]>
	</fx:Script>
	

	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<!-- Place any UI components here. -->	
	<s:layout>
		<s:HorizontalLayout/>
	</s:layout>
	<s:Button label="mv1" click="_onMove1()"  />
	<s:Button label="mv" click="_onMove()"  />
	<s:TextInput id="x_textinput" text="20" editable="true" width="150" />
	<s:TextInput id="y_textinput" text="910" editable="true" width="150" />
	<s:TextInput id="width_textinput" text="800" editable="true" width="150"/>
	<s:TextInput id="height_textinput" text="800" editable="true" width="150"/>
	<s:Button label="B" click="_onShowBoundsClick(event)"   />
	
</s:BorderContainer>