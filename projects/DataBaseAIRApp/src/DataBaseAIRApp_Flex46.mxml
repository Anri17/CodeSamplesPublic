<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009" 
					   xmlns:s="library://ns.adobe.com/flex/spark" 
					   xmlns:mx="library://ns.adobe.com/flex/mx"
					   applicationComplete="creationCompleteHandler(event)"
					   >
	
	<fx:Script>
		<![CDATA[
			import flash.display.Loader;
			import flash.display.LoaderInfo;
			import flash.events.Event;
			import flash.events.MouseEvent;
			import flash.events.SQLErrorEvent;
			import flash.events.SQLEvent;
			import flash.media.Sound;
			import flash.net.FileFilter;
			import flash.net.URLRequest;
			import flash.utils.ByteArray;
			
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.events.IndexChangedEvent;
			import mx.events.ListEvent;
			
			import com.thirdparty.data.types.ImageClass;
			import com.thirdparty.data.types.Mp3Class;
			import com.thirdparty.data.types.MultimediaClass;
			import com.thirdparty.data.types.VideoClass;
			
			protected var conn:SQLConnection = new SQLConnection();
			protected var dbFile:File = File.applicationStorageDirectory.resolvePath("MultimediaCollection.db");
			protected var AddedFileType:String= new String;
			private var fileToUpload:File=new File;
			
			[Bindable]
			private var MediaCollection:MultimediaClass=new MultimediaClass();
			
			protected function createTable():void
			{
				var createStmt:SQLStatement = new SQLStatement();
				createStmt.sqlConnection = conn;
				var sql:String = "";
				sql += "CREATE TABLE IF NOT EXISTS MMCollection (";
				sql += "        Name              STRING PRIMARY KEY,";
				sql += "        MultimediaClass        OBJECT";
				sql += ")";
				createStmt.text = sql;
				
				try
				{
					createStmt.execute();
				}
				catch (error:SQLError)
				{
					trace("Error creating table");
					trace("CREATE TABLE error:", error);
					trace("error.message:", error.message);
					trace("error.message:", error.message);
					_doAlert(error.message,error.message);
					return;
				}
				
			}
			
			protected function deleteTable():void
			{
				var createStmt:SQLStatement = new SQLStatement();
				createStmt.sqlConnection = conn;
				var sql:String = "";
				sql += "DROP TABLE IF EXISTS MMCollection";
				createStmt.text = sql;
				
				try
				{
					createStmt.execute();
				}
				catch (error:SQLError)
				{
					trace("Error creating table");
					trace("CREATE TABLE error:", error);
					trace("error.message:", error.message);
					trace("error.message:", error.message);
					_doAlert(error.message,error.message);
					return;
				}
				
			}
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				// TODO Auto-generated method stubtry
				try
				{
					conn.open(dbFile);
					trace("the database was created successfully");
					uiVBox.enabled = true;
				}
				catch (error:SQLError)
				{
					trace("Error message:", error.message);
					trace("Details:", error.message);
				}
				createTable();
				MediaCollection.name=enteredName.text;
			}
			
			protected function _onDeleteDatabaseButtonClick(event:MouseEvent):void
			{
				deleteTable();
				createTable();
				tabNavigator.selectedIndex = 0; //show main screen again
				
			}
			protected var retrieveStmt:SQLStatement=new SQLStatement();
			protected function retrieveClickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				var MediaName:String=new String;
				if(tabNavigator.selectedIndex==1)
					MediaName=NameforUpdation.text;
				if(tabNavigator.selectedIndex==2)
					MediaName=NameforPreview.text;
				if(MediaName=="")
				{
					_doAlert("Please Enter the Name of the Media Collection to be retrieved","Warning");
					return;
				}
				retrieveStmt=new SQLStatement();
				retrieveStmt.sqlConnection=conn;
				var sql:String = "SELECT * FROM MMCollection WHERE Name=@pkey";
				retrieveStmt.text = sql;
				retrieveStmt.parameters["@pkey"]=MediaName;
				retrieveStmt.addEventListener(SQLEvent.RESULT,retrieveHandler);
				cursorManager.setBusyCursor();
				retrieveStmt.execute();
				
				trace("RETRIEVE statement succeeded");
				
				
				
				
			}
			
			protected function retrieveHandler(event:SQLEvent):void
			{
				var result:SQLResult = retrieveStmt.getResult();
				
				if(result.data==null)
					_doAlert("There is no such Media Set","Warning");	
				else{
					_doAlert("The Media was retrieved","Acknowledgement");
					MediaCollection.DeriveMediaFromObject(result.data[0].MultimediaClass);	
				}
				cursorManager.removeBusyCursor();	
			}
			protected var insertStmt:SQLStatement=new SQLStatement();
			protected function insertClickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				if(enteredName.text=="")
				{
					_doAlert("Please Enter a Name for the Collection","Warning");
					return;
				}
				
				insertStmt.sqlConnection=conn;
				var sql:String = 
					"INSERT INTO MMCollection (" +
					"Name,MultimediaClass) "+
					"VALUES (@pkey,@obj)";
				insertStmt.text = sql;
				insertStmt.parameters["@pkey"]=enteredName.text;
				insertStmt.parameters["@obj"]=MediaCollection;
				insertStmt.addEventListener(SQLEvent.RESULT,insertHandler);
				insertStmt.addEventListener(SQLErrorEvent.ERROR,insertFaultHandler);
				try{
					cursorManager.setBusyCursor();
					insertStmt.execute();
					
				}
				catch(error:Error)
				{
					_doAlert (error.message,"Error");
				}
				
				
				
			}
			protected function _doAlert (a: *, b:* = null,c:* = null,d:* = null,e:* = null,f:* = null,g_uint:* = null,m:* = null) : void
			{
				
				Alert.show (a, b,c,d,e,f,g_uint,m);
			}
			protected function insertHandler(event:SQLEvent):void
			{
				trace("INSERT statement succeeded");
				_doAlert("The Media was inserted","Acknowledgement");
				cursorManager.removeBusyCursor();
			}
			protected function insertFaultHandler(event:SQLErrorEvent):void
			{
				var error:Error=event.error;
				trace("Error message:", error.message);
				_doAlert(error.message,"Error");
				trace("Details:", error.message);
				trace(error.message=="column 'Name' is not unique");
				if(error.message=="column 'Name' is not unique")
				{
					_doAlert("This Media Set already Exists. Use 'Update Media' to make changes to it.","Warning");
				}
				
			}
			protected function updateClickHandler(event:MouseEvent):void
			{
				if(MediaCollection.ImagesArray.length==0&&MediaCollection.VideosArray.length==0&&MediaCollection.SongsArray.length==0)
					_doAlert("Are you sure you want to Empty the Media Set in the database","Warning",Alert.YES|Alert.NO,this,AlertEventListener);
				
				var updateStmt:SQLStatement=new SQLStatement();
				updateStmt.sqlConnection=conn;
				var sql:String = 
					"UPDATE MMCollection SET "+
					" MultimediaClass=@obj "+
					"WHERE name=@pkey";
				updateStmt.text = sql;
				updateStmt.parameters["@pkey"]=NameforUpdation.text;
				updateStmt.parameters["@obj"]=MediaCollection;
				
				cursorManager.setBusyCursor();
				// execute the statement
				updateStmt.addEventListener(SQLEvent.RESULT,updateHandler);
				updateStmt.addEventListener(SQLErrorEvent.ERROR,updateFaultHandler);
				try{
					updateStmt.execute();
				}
				catch(error:Error)
				{
					_doAlert(error.message,"Error");
				}
				
				
			}
			protected function updateHandler(event:SQLEvent):void
			{
				trace("UPDATE statement succeeded");
				_doAlert("The Media was updated","Acknowledgement");
				cursorManager.removeBusyCursor();
			}
			protected function updateFaultHandler(event:SQLErrorEvent):void
			{
				var error:Error=event.error;
				trace("Error message:", error.message);
				trace("Details:", error.message);
				cursorManager.removeBusyCursor();
			}	
			protected function AlertEventListener(event:CloseEvent):void
			{
				if(event.detail==Alert.YES)
				{
					var updateStmt:SQLStatement=new SQLStatement();
					updateStmt.sqlConnection=conn;
					var sql:String = 
						"UPDATE MMCollection SET "+
						" MultimediaClass=@obj "+
						"WHERE name=@pkey";
					updateStmt.text = sql;
					updateStmt.parameters["@pkey"]=NameforUpdation.text;
					updateStmt.parameters["@obj"]=MediaCollection;
					cursorManager.setBusyCursor();
					updateStmt.addEventListener(SQLEvent.RESULT,updateHandler);
					updateStmt.addEventListener(SQLErrorEvent.ERROR,updateFaultHandler);
					
					updateStmt.execute();		
				}
			}
			
			protected var imagesFilter:FileFilter = new FileFilter("Images", "*.jpg;*.gif;*.png");
			protected function imageAdder(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				AddedFileType="image";
				fileToUpload=new File();
				fileToUpload.addEventListener(Event.SELECT,uploadFile);
				fileToUpload.browseForOpen("Open",[imagesFilter]);
			}
			protected var videoFilter:FileFilter = new FileFilter("FlvVideos", "*.flv");
			protected function videoAdder(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				AddedFileType="video";
				fileToUpload=new File();
				fileToUpload.addEventListener(Event.SELECT,uploadFile);
				fileToUpload.browseForOpen("Open",[videoFilter]);
			}
			
			protected var songFilter:FileFilter = new FileFilter("Mp3", "*.mp3;");
			protected function mp3Adder(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				AddedFileType="song";
				fileToUpload=new File();
				fileToUpload.addEventListener(Event.SELECT,uploadFile);
				fileToUpload.browseForOpen("Open",[songFilter]);
			}
			protected function imageRemover(event:MouseEvent):void
			{
				MediaCollection.ImagesArray.removeItemAt(ImageAddList.selectedIndex);
			}
			protected function videoRemover(event:MouseEvent):void
			{
				MediaCollection.VideosArray.removeItemAt(VideoAddList.selectedIndex);
			}
			protected function songRemover(event:MouseEvent):void
			{
				MediaCollection.SongsArray.removeItemAt(Mp3AddList.selectedIndex);
			}
			protected function uploadFile(event:Event):void
			{
				fileToUpload=event.target as File;
				var fileData:ByteArray = new ByteArray();
				var stream:FileStream = new FileStream();
				stream.open(fileToUpload, FileMode.READ);
				stream.readBytes(fileData, 0, stream.bytesAvailable);
				stream.close(); 
				if(AddedFileType=="image"){
					var Im:ImageClass=new ImageClass();
					Im.name=fileToUpload.name;
					Im.dataContent=fileData;
					MediaCollection.ImagesArray.addItem(Im);
				}
				if(AddedFileType=="video"){
					var Vid:VideoClass=new VideoClass();
					Vid.name=fileToUpload.name;
					Vid.dataContent=fileData;
					MediaCollection.VideosArray.addItem(Vid);
				}
				if(AddedFileType=="song"){
					var Song:Mp3Class=new Mp3Class();
					Song.name=fileToUpload.name;
					Song.dataContent=fileData;
					MediaCollection.SongsArray.addItem(Song);
				}
			}
			
			
			
			protected function tabnavigatorChangeHandler(event:IndexChangedEvent):void
			{
				MediaCollection.clear();
			}
			
			
			protected function ImagePreviewList_itemClickHandler(event:ListEvent):void
			{
				if(_achannel!=null)
				{
					_achannel.stop();
				}
				try {
					song.close();
					
				}
				catch (error:IOError) {
					trace(errorString);    
				}
				Mp3PreviewList.selectedIndex=-1;
				
				if(PreviewedVideo.playing==true)
					PreviewedVideo.stop();
				PreviewedVideo.visible=false;
				PreviewedVideo.source=null;
				VideoPreviewList.selectedIndex=-1;
				
				var loader:Loader=new Loader;
				loader.contentLoaderInfo.addEventListener(Event.COMPLETE,loaderCompleteHandler);
				loader.loadBytes(MediaCollection.ImagesArray.getItemAt(ImagePreviewList.selectedIndex).dataContent);
				
			}
			private function loaderCompleteHandler(event:Event)	:void
			{
				var loader:Loader = (event.target as LoaderInfo).loader;
				var bmp:Bitmap = Bitmap(loader.content);
				PreviewedImage.source=bmp;
				PreviewedImage.visible=true;
			}
			
			protected var Videofile:File=new File;
			protected function VideoPreviewList_itemClickHandler(event:ListEvent):void
			{
				ImagePreviewList.selectedIndex=-1;
				PreviewedImage.visible=false;
				
				if(_achannel!=null)
				{
					_achannel.stop();
				}
				try {
					song.close();
					
				}
				catch (error:IOError) {
					trace(errorString);    
				}
				Mp3PreviewList.selectedIndex=-1;
				
				if(PreviewedVideo.playing==true)
					PreviewedVideo.stop();
				PreviewedVideo.close();
				
				Videofile=File.applicationStorageDirectory.resolvePath("temp.flv");
				if(Videofile.exists)
				{
					Videofile.deleteFile();
				}
				var stream:FileStream = new FileStream();
				stream.open(Videofile, FileMode.WRITE);
				stream.writeBytes(MediaCollection.VideosArray.getItemAt(VideoPreviewList.selectedIndex).dataContent, 0,MediaCollection.VideosArray.getItemAt(VideoPreviewList.selectedIndex).dataContent.bytesAvailable );
				stream.close(); 
				PreviewedVideo.source=Videofile.nativePath;
				PreviewedVideo.visible=true;
				PreviewedVideo.play();
			}	
			
			protected  var song:Sound=new Sound;
			protected var _achannel:SoundChannel;
			protected function Mp3PreviewList_itemClickHandler(event:ListEvent):void
			{
				ImagePreviewList.selectedIndex=-1;
				PreviewedImage.visible=false;
				
				if(PreviewedVideo.playing==true)
					PreviewedVideo.stop();
				PreviewedVideo.source=null;
				PreviewedVideo.visible=false;
				VideoPreviewList.selectedIndex=-1;
				
				if(_achannel!=null)
				{
					_achannel.stop();
				}
				try {
					song.close();
					
				}
				catch (error:IOError) {
					trace(errorString);    
				}
				song=new Sound;
				var file:File=File.applicationStorageDirectory.resolvePath("temp.mp3");
				if(file.exists)
				{
					file.deleteFile();
				}
				var stream:FileStream = new FileStream();
				stream.open(file, FileMode.WRITE);
				stream.writeBytes(MediaCollection.SongsArray.getItemAt(Mp3PreviewList.selectedIndex).dataContent, 0,MediaCollection.SongsArray.getItemAt(Mp3PreviewList.selectedIndex).dataContent.bytesAvailable );
				stream.close(); 
				
				song.load(new URLRequest(file.url));
				song.addEventListener(Event.COMPLETE,songCompleteHandler);
				
			}
			
			private function songCompleteHandler(event:Event):void
			{
				_achannel=song.play();		
			}
			
			
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<mx:VBox id = "uiVBox" enabled="false" width="100%" height="100%" verticalAlign="middle" horizontalAlign="center">
		<mx:Button id = "deleteDatabase_button" color="0xFF0000" label = "Delete Database" click="_onDeleteDatabaseButtonClick(event)" />
		
		
		<mx:TabNavigator id="tabNavigator" x="25" y="74" width="819" height="567" change="tabnavigatorChangeHandler(event)"  creationPolicy="all">
			<mx:Canvas label="Add Media" width="100%" height="100%">
				<mx:TextInput x="325" y="33" id="enteredName"/>
				<mx:Text x="244" y="34" text="Name:" width="67" height="21"/>
				<mx:Text x="130" y="81" text="Images" width="67" height="21" textAlign="center"/>
				<mx:Text x="370" y="81" text="Videos" width="67" height="21" textAlign="center"/>
				<mx:Text x="609" y="81" text="Mp3s" width="67" height="21" textAlign="center"/>
				<mx:DataGrid id="ImageAddList" x="90" y="107" height="158"  dataProvider="{MediaCollection.ImagesArray}" width="152" >
					<mx:columns>
						<mx:DataGridColumn headerText=""  dataField="name"/>
					</mx:columns>
				</mx:DataGrid>
				<mx:DataGrid id="VideoAddList" x="328" y="107" height="158"  dataProvider="{MediaCollection.VideosArray}" width="152">
					<mx:columns>
						<mx:DataGridColumn headerText=""  dataField="name"/>
					</mx:columns>
				</mx:DataGrid>
				<mx:DataGrid id="Mp3AddList" x="565" y="107" height="158"  dataProvider="{MediaCollection.SongsArray}" width="152">
					<mx:columns>
						<mx:DataGridColumn headerText=""  dataField="name"/>
					</mx:columns>
				</mx:DataGrid>
				<mx:Button x="90" y="275" label="+" width="38" click="imageAdder(event)"/>
				
				<mx:Button x="204" y="275" label="-" width="38" click="imageRemover(event)"/>
				<mx:Button x="442" y="275" label="-" width="38" click="videoRemover(event)"/>
				<mx:Button x="679" y="275" label="-" width="38" click="songRemover(event)"/>
				<mx:Button x="328" y="275" label="+" width="38" click="videoAdder(event)"/>
				<mx:Button x="565" y="275" label="+" width="38" click="mp3Adder(event)"/>
				<mx:Button x="585" y="25" label="Add to DB" click="insertClickHandler(event)" width="116" cornerRadius="8" height="34"/>
			</mx:Canvas>
			<mx:Canvas label="Update Media" width="100%" height="100%" >
				<mx:TextInput x="325" y="33" id="NameforUpdation"/>
				<mx:Text x="244" y="34" text="Name:" width="67" height="21"/>
				<mx:Text x="130" y="81" text="Images" width="67" height="21" textAlign="center"/>
				<mx:Text x="370" y="81" text="Videos" width="67" height="21" textAlign="center"/>
				<mx:Text x="609" y="81" text="Mp3s" width="67" height="21" textAlign="center"/>
				<mx:DataGrid id="ImageUpdateList" x="90" y="107" height="158"  dataProvider="{MediaCollection.ImagesArray}" width="152">
					<mx:columns>
						<mx:DataGridColumn headerText=""  dataField="name"/>
					</mx:columns>
				</mx:DataGrid>
				<mx:DataGrid id="VideoUpdateList" x="328" y="107" height="158"  dataProvider="{MediaCollection.VideosArray}" width="152">
					<mx:columns>
						<mx:DataGridColumn headerText=""  dataField="name"/>
					</mx:columns>
				</mx:DataGrid>
				<mx:DataGrid id="Mp3UpdateList" x="565" y="107" height="158"  dataProvider="{MediaCollection.SongsArray}" width="152">
					<mx:columns>
						<mx:DataGridColumn headerText=""  dataField="name"/>
					</mx:columns>
				</mx:DataGrid>
				<mx:Button x="90" y="275" label="+" width="38" click="imageAdder(event)"/>
				
				<mx:Button x="204" y="275" label="-" width="38" click="imageRemover(event)"/>
				<mx:Button x="442" y="275" label="-" width="38" click="videoRemover(event)"/>
				<mx:Button x="679" y="275" label="-" width="38" click="songRemover(event)"/>
				<mx:Button x="328" y="275" label="+" width="38" click="videoAdder(event)"/>
				<mx:Button x="565" y="275" label="+" width="38" click="mp3Adder(event)"/>
				<mx:Button x="513" y="21" label="Retrieve Media" click="retrieveClickHandler(event)" width="116" cornerRadius="8" height="34"/>
				<mx:Button x="657" y="21" label="Update in DB" click="updateClickHandler(event)" width="116" cornerRadius="8" height="34"/>
			</mx:Canvas>
			<mx:Canvas label="Preview Media" width="100%" height="100%">
				<mx:TextInput x="325" y="33" id="NameforPreview"/>
				<mx:Text x="244" y="34" text="Name:" width="67" height="21"/>
				<mx:Text x="130" y="81" text="Images" width="67" height="21" textAlign="center"/>
				<mx:Text x="370" y="81" text="Videos" width="67" height="21" textAlign="center"/>
				<mx:Text x="609" y="81" text="Mp3s" width="67" height="21" textAlign="center"/>
				<mx:DataGrid id="ImagePreviewList" x="90" y="107" height="158"  dataProvider="{MediaCollection.ImagesArray}" width="152" itemClick="ImagePreviewList_itemClickHandler(event)">
					<mx:columns>
						<mx:DataGridColumn headerText=""  dataField="name"/>
					</mx:columns>
				</mx:DataGrid>
				<mx:DataGrid id="VideoPreviewList" x="328" y="107" height="158"  dataProvider="{MediaCollection.VideosArray}" width="152" itemClick="VideoPreviewList_itemClickHandler(event)">
					<mx:columns>
						<mx:DataGridColumn headerText=""  dataField="name"/>
					</mx:columns>
				</mx:DataGrid>
				<mx:DataGrid id="Mp3PreviewList" x="565" y="107" height="158"  dataProvider="{MediaCollection.SongsArray}" width="152" itemClick="Mp3PreviewList_itemClickHandler(event)">
					<mx:columns>
						<mx:DataGridColumn headerText=""  dataField="name"/>
					</mx:columns>
				</mx:DataGrid>
				<mx:Button x="513" y="21" label="Retrieve Media" click="retrieveClickHandler(event)" width="116" cornerRadius="8" height="34"/>
				<mx:Image id="PreviewedImage" x="250.5" y="291" width="316" height="207" visible="false"/>
				<mx:VideoDisplay id="PreviewedVideo" x="250.5" y="291" width="316" height="207" visible="false"/>
			</mx:Canvas>
		</mx:TabNavigator>
	</mx:VBox>
</s:WindowedApplication>
