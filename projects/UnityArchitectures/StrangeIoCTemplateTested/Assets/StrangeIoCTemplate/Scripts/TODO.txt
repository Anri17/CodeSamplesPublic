

QUESTIONS
1. 


ARTICLE PREPARATION

1. Commend out all unneeded "Debug.log()" statements for easier readability.
2. Renamed file to "CustomRoot.cs".
3. Renamed file to "CustomContext.cs".

PROCESS OF ADDING TESTS TO EXISTING PROJECT

1. import Unity Test Tools Package
2. Create Tests for 
** CustomModel
** CustomService
** Several Commands
3. ---


//-------------------------------------- -------------------------------------- 
//-------------------------------------- -------------------------------------- 


CustomModelTest.cs
//--------------------------------------
//  Class
//--------------------------------------
[TestFixture]
public class CustomModelTest
{
    //--------------------------------------
    //  Setup
    //--------------------------------------
    //PROPERTIES TO REUSE
    private ICustomModel _iCustomModel;
    private List<string> _originalTestGameList;
    
    //--------------------------------------
    //  Test
    //--------------------------------------
    [Test]
    public void testPropertyGameList_Set  ()
    {
        
        //1. SETUP DEPENDENCIES
        _iCustomModel = new CustomModel();
        _iCustomModel.gameListUpdatedSignal = new GameListUpdatedSignal()
            _iCustomModel.gameListUpdatedSignal.Add(onGameListUpdated);
        
        //2. SETTER
        _iCustomModel.gameList = _originalTestGameList;
        
        //3. TEST
        Assert.AreEqual (_originalTestGameList, _iCustomModel.gameList);
        
    }
    
    //--------------------------------------
    //  Events
    //--------------------------------------
    public void onGameListUpdated  (List<string> aGameList)
    {
        
        //4. REMOVE
        _iCustomModel.gameListUpdatedSignal.RemoveListener (onGameListUpdated);
        
        //5. TEST
        Assert.AreEqual (_originalTestGameList, aGameList);
        
    }
    
}

//-------------------------------------- -------------------------------------- 
//-------------------------------------- -------------------------------------- 



CustomServiceTest.cs
//--------------------------------------
//  Class
//--------------------------------------
[TestFixture]
public class CustomServiceTest
{
	
	//--------------------------------------
	//  Setup
	//--------------------------------------
	
	//PROPERTIES TO REUSE
	private ICustomService _iCustomService;


	//--------------------------------------
	//  Tests
	//--------------------------------------
	[Test]
	[MaxTime (100)]
	public void testDoLoadGameList  ()
	{
		//1. SETUP DEPENDENCIES
		_iCustomService = new CustomService ();
		_iCustomService.customServiceLoadedSignal = new CustomServiceLoadedSignal();
		
		//2. LISTEN
		_iCustomService.customServiceLoadedSignal.AddListener (onCustomServiceLoadedSignal);

		//3. SETUP
		_iCustomService.doLoadGameList();
		
	}

	
	//--------------------------------------
	//  Events
	//--------------------------------------
	private void onCustomServiceLoadedSignal (List<string> aGameList)
	{

		//4. CLEANUP
		_iCustomService.customServiceLoadedSignal.RemoveListener (onCustomServiceLoadedSignal);

		//5. TEST
		Assert.AreNotEqual (null, aGameList);

	}

	
	
}

//-------------------------------------- -------------------------------------- 
//-------------------------------------- -------------------------------------- 

CustomServiceLoadedCommandTest.cs
[TestFixture]
public class CustomServiceLoadedCommandTest
{
	
	
	//--------------------------------------
	//  Setup
	//--------------------------------------
	
	//PROPERTIES TO REUSE
	private ICustomService _iCustomService;
	private ICustomModel _iCustomModel;
	private List<string> _originalTestGameList;
	
	//--------------------------------------
	//  Tests
	//--------------------------------------
	
	[Test]
	[MaxTime (100)]
	public void testCommandExecute  ()
	{
		
		//1. SETUP DEPENDENCIES
		_iCustomService 	= new CustomService();
		_iCustomService.customServiceLoadedSignal = new CustomServiceLoadedSignal(); //injected, in production
		//
		_iCustomModel 		= new CustomModel();
		_iCustomModel.gameListUpdatedSignal = new GameListUpdatedSignal(); //injected, in production
		_iCustomModel.gameListUpdatedSignal.AddListener (onCustomGameListUpdated);


		//CREATE TEST INSTANCE
		CustomServiceLoadedCommand customServiceLoadedCommand = new CustomServiceLoadedCommand();

		//2. USE DEPENDENCIES FROM 'SETUP'
		customServiceLoadedCommand.customModel = _iCustomModel;
		//
		 _originalTestGameList = new List<string>();
		_originalTestGameList.Add ("String0");
		customServiceLoadedCommand.gameList = _originalTestGameList;
		
		//3. CREATE TEST DELEGATE
		TestDelegate testDelegate = delegate()
		{
			//PUT 1 OR MORE LINES OF CODE HERE
			customServiceLoadedCommand.Execute();
		};
		

		//4. RUN TEST DELEGATE
		Assert.DoesNotThrow (testDelegate);


		
	}
	
	
	//--------------------------------------
	//  Events
	//--------------------------------------
	private void onCustomGameListUpdated (List<string> aGameList)
	{

		//CLEANUP
		_iCustomModel.gameListUpdatedSignal.RemoveListener (onCustomGameListUpdated);
		
		//TEST
		Assert.AreEqual (_originalTestGameList, aGameList);
		
	}
	
}



